// <auto-generated />
using System;
using FoodDelivery.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodDelivery.Migrations
{
    [DbContext(typeof(FDDbContext))]
    partial class FDDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodDelivery.Models.Address.AddressElementModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IsActiveInt")
                        .HasColumnType("integer")
                        .HasColumnName("isactive");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("ObjectGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("objectguid");

                    b.Property<int>("ObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("objectid");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("typename");

                    b.HasKey("Id");

                    b.ToTable("as_addr_obj");
                });

            modelBuilder.Entity("FoodDelivery.Models.Address.HierarchyModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IsActiveInt")
                        .HasColumnType("integer")
                        .HasColumnName("isactive");

                    b.Property<int>("ObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("objectid");

                    b.Property<int>("ParentObjId")
                        .HasColumnType("integer")
                        .HasColumnName("parentobjid");

                    b.HasKey("Id");

                    b.ToTable("as_adm_hierarchy");
                });

            modelBuilder.Entity("FoodDelivery.Models.Address.HouseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddNum1")
                        .HasColumnType("text")
                        .HasColumnName("addnum1");

                    b.Property<string>("AddNum2")
                        .HasColumnType("text")
                        .HasColumnName("addnum2");

                    b.Property<int?>("AddType1")
                        .HasColumnType("integer")
                        .HasColumnName("addtype1");

                    b.Property<int?>("AddType2")
                        .HasColumnType("integer")
                        .HasColumnName("addtype2");

                    b.Property<string>("HouseNum")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("housenum");

                    b.Property<int>("IsActiveInt")
                        .HasColumnType("integer")
                        .HasColumnName("isactive");

                    b.Property<Guid>("ObjectGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("objectguid");

                    b.Property<int>("ObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("objectid");

                    b.HasKey("Id");

                    b.ToTable("as_houses");
                });

            modelBuilder.Entity("FoodDelivery.Models.Basket.BasketModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid")
                        .HasColumnName("dish_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("baskets");
                });

            modelBuilder.Entity("FoodDelivery.Models.Dish.DishModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsVegetarian")
                        .HasColumnType("boolean")
                        .HasColumnName("is_vegetarian");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("photo");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.ToTable("dishes");
                });

            modelBuilder.Entity("FoodDelivery.Models.Dish.DishRaitingModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid")
                        .HasColumnName("dish_id");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("dish_raiting");
                });

            modelBuilder.Entity("FoodDelivery.Models.Order.OrderModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("Address")
                        .HasColumnType("uuid")
                        .HasColumnName("address");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivery_time");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("FoodDelivery.Models.Order.OrderToDishesModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid")
                        .HasColumnName("dish_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.HasKey("Id");

                    b.ToTable("order_to_dishes");
                });

            modelBuilder.Entity("FoodDelivery.Models.User.BannedToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.HasKey("Id");

                    b.ToTable("banned_tokens");
                });

            modelBuilder.Entity("FoodDelivery.Models.User.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.HasKey("Id");

                    b.ToTable("users");
                });
#pragma warning restore 612, 618
        }
    }
}
